#  *_ coding : UTF-8 _*_
#  开发团队  : Bill 
#  开发时间  ：2022/1/6 
#  文件名称  : Astocktrade.PY
#  开发工具  : PyCharm
import requests
from time import sleep
from datetime import datetime, time, timedelta
# from dateutil import parser
import pandas as pd
from pandas import DataFrame
import os
import numpy as np
# from jqdatasdk import *
from WindPy import w
from matplotlib import *
# from mplfinance.original_flavor import candlestick_ohlc
import matplotlib.pyplot as plt
from matplotlib.dates import date2num

import csv
csv.field_size_limit(500 * 1024 * 1024)
# 写入csv
def writetocsv(res,des_file):
    with open(des_file, "a", encoding="utf-8", newline="") as f:
        writer = csv.writer(f)
        # headers = ['公司名称',  '借款银行', '借款金额','期限', '利率','余额']
        for line in res:
            writer.writerow(line)
    print('保存成功')

    
def make_bar(c,h,l,o): 
    bar = abs(o-c)
    if c<o:
        up_len = h-o
        down_len = c-l
    if c>o:
        up_len = h-c
        down_len = o-l
    else:
        up_len = h-c
        down_len = c-l
    return {'up_len':up_len,'bar':bar,'down_len':down_len}

def get_history_data_from_Windpy(code):
    
    print('从wind获取数据......')
    begintime='2018-1-1'
    endtime=datetime.strftime(datetime.now(),'%Y-%m-%d %H:%M:%S')
    # 获取tick
#     fields="last,bid1,ask1" 
#     res = w.wst(codes,fields,begintime,endtime)
    # 获取分钟序列
#     fields='CLOSE,HIGH,LOW,OPEN'
#     res = w.wsi(codes,fields,begintime,endtime)
    # 获取日时间序列数据
    fields='CLOSE,HIGH,LOW,OPEN'
    res = w.wsd(code,fields,begintime,endtime)
    df= pd.DataFrame(data = res.Data,index = res.Fields,columns=res.Times).T
    
    bar_path = 'D:\\Desktop\\python量化\\wind日频\\'+code + '_bar_1d.csv'
    df.to_csv(bar_path,index_label='datetime')
#     display(df)
    return df
# get_history_data_from_Windpy('000001.SZ')   

def choice_A(code):
    print('正在处理',code)
    try:
        bar_path = 'D:\\Desktop\\python量化\\wind日频\\'+code + '_bar_1d.csv'
        df = pd.read_csv(bar_path)
    except:
        print('本地没有历史数据')
        get_history_data_from_Windpy(code)
        bar_path = 'D:\\Desktop\\python量化\\wind日频\\'+code + '_bar_1d.csv'
        df = pd.read_csv(bar_path)
    dfc = df.copy()
    dfc['keep_deline_days']=[0]*len(df)
    dfc['倒锤子'] = ['']*len(df)
    dfc['未来上涨天数'] = ['']*len(df)
    dfc['code'] = [code]*len(df)
    dfc['未来上涨幅度'] = [code]*len(df)
    def check_future(i):
        ts = []
        fd =0
        try:
            for t in range(1,5): #未来十天上涨天数
                if dfc['CLOSE'][i+t] > dfc['CLOSE'][i+t-1]:
                    ts.append(t)
                  
        except:
            print(code,'最近发生',dfc['datetime'][i])
        if ts != []:
            fd = (dfc['CLOSE'][i+ts[-1]]-dfc['CLOSE'][i])/dfc['CLOSE'][i]*100
        return [ts,fd]
    for i in range(1,len(dfc)): 
        k = make_bar(dfc['CLOSE'][i],dfc['HIGH'][i],dfc['LOW'][i],dfc['OPEN'][i]) 
        if dfc['CLOSE'][i] < dfc['CLOSE'][i-1]: # 下降趋势
            dfc['keep_deline_days'][i] = dfc['keep_deline_days'][i-1]+1
            if k['up_len'] >= 2*k['bar'] and 2*k['bar']>= 2*k['down_len']: # 倒锤子（看涨）:
                dfc['倒锤子'][i] = 1
                dfc['未来上涨天数'][i] = check_future(i)[0]
                dfc['未来上涨幅度'][i] = check_future(i)[1]
    df_res = dfc[dfc['倒锤子']==1]
    # 结果汇总
    a = len(df_res) # 倒锤子天数
#     b = len(df_res[df_res['未来上涨天数']!=[]])# 未来上涨次数
    c = df_res['未来上涨幅度'].max()# 最大上涨幅度
    date = df_res['datetime'][df_res[df_res['未来上涨幅度']==df_res['未来上涨幅度'].max()].index[0]]
    e = df_res['keep_deline_days'][df_res[df_res['未来上涨幅度']==df_res['未来上涨幅度'].max()].index[0]]
    d = len(df_res[df_res['未来上涨幅度']>0])/a
    last = df_res['datetime'].tolist()[-1]
    res = [code,a,c,d,date,e,last]
    print(res)
    writetocsv([res],'倒锤子resv2.csv')
    return df_res
    
if __name__ == '__main__':
    w.start() # 默认命令超时时间为120秒，如需设置超时时间可以加入waitTime参数，例如waitTime=60,即设置命令超时时间为60秒
    w.isconnected() # 判断WindPy是否已经登录成功
    codes = pd.read_csv('stock_list.csv')['ts_code'].tolist()
    df_list = []
    for code in codes[2324:]:
        save_path ='D:\\Desktop\\python量化\\倒锤子\\' + code + '.csv'
        try:
            run_res = choice_A(code)
            run_res.to_csv(save_path)
            df_list.append(run_res)
        except:
            print(code,'有问题！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！')
            writetocsv([[code]],'wrong_codes.csv')
    res = pd.concat(df_list,axis=0)
    res.to_excel('倒锤子原始数据.xlsx')

    
    
    
    
    
    
    
    
    
    
